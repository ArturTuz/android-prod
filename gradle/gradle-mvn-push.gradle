apply plugin: 'maven-publish'


def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}


def getOutputDir() {
    if (isReleaseBuild()) {
        return "${project.buildDir}/releases"
    } else {
        return "${project.buildDir}/snapshots"
    }
}

def getDestUrl() {
    if (isReleaseBuild()) {
        return "s3://spot.im.artifacts/android/"
    } else {
        return "s3://spot.im.artifacts/android/"
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = configurations.compile + files(ext.androidJar)
    // exclude generated files
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.links("http://d.android.com/reference/");
    options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
    options {
        failOnError false
    }
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
}

publishing {
    publications {
        spotImPublication(MavenPublication) {
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME
            artifact(javadocJar) { // (3)
                classifier = 'javadoc'
            }
            artifact("$buildDir/outputs/aar/" + POM_ARTIFACT_ID + "-release.aar") {

            }
            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url getDestUrl()
            credentials(AwsCredentials) {
                accessKey = AWS_ACCESS_KEY
                secretKey = AWS_SECRET_KEY
            }
        }
    }
}

